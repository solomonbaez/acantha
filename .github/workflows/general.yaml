name: Rust

on: 
  push:
    branches:
      - main
    paths:
      - 'production_rust/**'
  
  pull_request:
    types: [ opened, synchronize, reopened ]
    branches:
      - main
    paths: 
      - 'production_rust/**'

  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  SQLX_VERSION: ~0.6
  SQLX_FEATURES: "rustls,postgres"

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ultima
          POSTGRES_DB: newsletter
        ports:
          - 5432:5432
      redis:
        image: redis:7
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          key: sqlx-${{ env.SQLX_VERSION }}
          
      - name: Install sqlx-cli
        working-directory: production_rust
        run:
          cargo install sqlx-cli
          --version=${{ env.SQLX_VERSION }}
          --features ${{ env.SQLX_FEATURES }}
          --no-default-features
          --locked
          
      - name: Install postgresql-client
        run: sudo apt-get update && sudo apt-get install postgresql-client -y
        
      - name: Migrate database
        run: SKIP_DOCKER=true ./scripts/init_db.sh
      
      - name: Verify SQLX Offline-mode
        working-directory: production_rust
        run: cargo sqlx prepare --check -- --bin production_rust
          
      - name: Run tests
        working-directory: production_rust
        run: cargo test

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: Enforce formatting
        working-directory: production_rust
        run: cargo fmt --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ultima
          POSTGRES_DB: newsletter
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          key: sqlx-${{ env.SQLX_VERSION }}
          
      - name: Install sqlx-cli
        working-directory: production_rust
        run:
          cargo install sqlx-cli
          --version=${{ env.SQLX_VERSION }}
          --features ${{ env.SQLX_FEATURES }}
          --no-default-features
          --locked
          
      - name: Install postgresql-client
        run: sudo apt-get update && sudo apt-get install postgresql-client -y
        
      - name: Migrate database
        run: SKIP_DOCKER=true ./scripts/init_db.sh
          
      - name: Linting
        working-directory: production_rust
        run: cargo clippy -- -D warnings

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ultima
          POSTGRES_DB: newsletter
        ports:
          - 5432:5432
      redis:
        image: redis:7
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          key: sqlx-${{ env.SQLX_VERSION }}
          
      - name: Install sqlx-cli
        working-directory: production_rust
        run:
          cargo install sqlx-cli
          --version=${{ env.SQLX_VERSION }}
          --features ${{ env.SQLX_FEATURES }}
          --no-default-features
          --locked
          
      - name: Install postgresql-client
        run: sudo apt-get update && sudo apt-get install postgresql-client -y
        
      - name: Migrate database
        run: SKIP_DOCKER=true ./scripts/init_db.sh
          
      - name: Generate code coverage
        working-directory: production_rust
        run: cargo install cargo-tarpaulin && cargo tarpaulin --verbose --workspace
        
